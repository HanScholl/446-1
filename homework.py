# -*- coding: utf-8 -*-
"""Homework_446.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X7phIMUiimb37lMgEOPnqYUqDYJsXRk2
"""



import numpy as np
class Polynomial:
  def __init__(self, input_data):
    self.coefficients = Polynomial.from_string(input_data)
    self.order = len(self.coefficients) - 1

  def __eq__(self, other):
    return np.array_equal(self.coefficients, other.coefficients)

  def __ne__(self, other):
    return not self.__eq__(other)

  def __add__(self, other):
    max_len = max(len(self.coefficients), len(other.coefficients))

    a = np.pad(self.coefficients, (0, max_len - len(self.coefficients)))
    b = np.pad(other.coefficients, (0, max_len - len(other.coefficients)))
    return Polynomial(a + b)

  def __sub__(self, other):
    max_len = max(len(self.coefficients), len(other.coefficients))

    a = np.pad(self.coefficients, (0, max_len - len(self.coefficients)))
    b = np.pad(other.coefficients, (0, max_len - len(other.coefficients)))
    return Polynomial(a - b)

  def __mul__(self, other):
    # Multiply two polynomials (convolution of coefficients)
    result = np.convolve(self.coefficients, other.coefficients)
    return Polynomial(result)


  def from_string(string):
    length = len(string)
    convert = list(string)


    i = 0
    while i < len(convert) - 1:
      if convert[i].isdigit() and convert[i+1].isdigit():
        convert[i] = "".join([convert[i],convert[i+1]])
        convert.pop(i+1)
      else:
        i += 1

    no_sp = np.zeros(length)
    no_sp = no_sp.astype(object)
    count = 0

    for term in convert:
      if term == " ":
        pass
      else :
        no_sp[count] = term
        count = count + 1

    new_sp = np.zeros(count)
    new_sp = new_sp.astype(object)

    for term in range(count):
      new_sp[term] = no_sp[term]

    fin_poly = np.zeros(count)
    fin_poly = fin_poly.astype(object)
    order = 0
    if new_sp[0].isdigit() and (new_sp[1] == '+' or new_sp[1] == '-'):
      fin_poly[0] = int(new_sp[0])

    if new_sp[0].isalpha() and new_sp[1] == '^':
      power = int(new_sp[2])
      order = max(order,power)
      fin_poly[power] = 1

    if new_sp[0].isalpha() and (new_sp[1] == '+'):
      power = int(1)
      order = max(order,power)
      fin_poly[power] = 1

    if new_sp[count-1].isdigit() and (new_sp[count-2] == '+' or new_sp[count-2] == '-'):
      if new_sp[count-2] == '-':
        fin_poly[0] = -int(new_sp[count-1])
      if new_sp[count-1] == '+':
        fin_poly[0] = int(new_sp[count-1])

    if new_sp[count-1].isalpha() and new_sp[count-2] != '^':
      power = int(1)
      order = max(order,power)
      if new_sp[count-4] == '-' and new_sp[count-2] == '*':
        fin_poly[1] = -int(new_sp[term-2])
      elif new_sp[count-2] == '-':
        fin_poly[1] = -1
      elif new_sp[count-4] == '+' and new_sp[count-2] == '*':
        fin_poly[1] = int(new_sp[term-2])
      else:
        fin_poly[1] = 1

    for term in range(1,count-1):
      if new_sp[term].isalpha() and new_sp[term+1] == '^':
        power = int(new_sp[term+2])
        order = max(order,power)
        if new_sp[term-3] == '-' and new_sp[term-1] == '*':
          fin_poly[power] = -int(new_sp[term-2])
        elif new_sp[term-1] == '-':
          fin_poly[power] = int(-1)
        elif new_sp[term-3] == '+' and new_sp[term-1] == '*':
          fin_poly[power] = int(new_sp[term-2])
        elif new_sp[term-1] == '+':
          fin_poly[power] = int(1)

      elif new_sp[term].isalpha() and new_sp[term+1] != '^':
        if new_sp[term-3] == '-' and new_sp[term-1] == '*':
          fin_poly[1] = -int(new_sp[term-2])
        elif new_sp[term-1] == '-':
          fin_poly[1] = -1
        elif new_sp[term-3] == '+' and new_sp[term-1] == '*':
          fin_poly[1] = int(new_sp[term-2])
        else:
          fin_poly[1] = 1

      elif new_sp[term].isdigit() and (new_sp[term+1] == '+' or new_sp[term+1] == '-') and (new_sp[term-1] != '*' or new_sp[term+1] != '*'):
        if new_sp[term-1] == '-':
          fin_poly[0] = -int(new_sp[term])
        if new_sp[term-1] == '+':
          fin_poly[0] = int(new_sp[term])

    new_poly = np.zeros(order+1,dtype=int)

    for term in range(order+1):
      new_poly[term] = fin_poly[term]


    return new_poly